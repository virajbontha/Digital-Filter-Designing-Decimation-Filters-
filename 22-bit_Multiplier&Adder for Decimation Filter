Real Coefficients

% Initialize the real_coefficients array
real_coefficients = zeros(1, 1024);

% Loop through k values from 0 to 1023 and store the results in real_coefficients
for k = 0:1023
    real_coefficients(k + 1) = calculateFilterOutput(k); % k + 1 because MATLAB indexing starts at 1
end

% Display the result
% disp(real_coefficients);

Imaginary Coefficients

% Initialize the real_coefficients array
img_coefficients = zeros(1, 1024);

% Loop through k values from 0 to 1023 and store the results in real_coefficients
for k = 0:1023
    img_coefficients(k + 1) = -1.* calculateFilterOutput1(k); % k + 1 because MATLAB indexing starts at 1
end

% Display the result
% disp(img_coefficients);

Combining Real and Imaginary parts
my_filter_coefficients = real_coefficients + 1i * img_coefficients;
fa=[0	48.828125	97.65625	146.484375	195.3125	244.140625	292.96875	341.796875	390.625	439.453125	488.28125	537.109375	585.9375	634.765625	683.59375	732.421875	781.25	830.078125	878.90625	927.734375	976.5625	1025.390625	1074.21875	1123.046875	1171.875	1220.703125	1269.53125	1318.359375	1367.1875	1416.015625	1464.84375	1513.671875	1562.5	1611.328125	1660.15625	1708.984375	1757.8125	1806.640625	1855.46875	1904.296875	1953.125	2001.953125	2050.78125	2099.609375	2148.4375	2197.265625	2246.09375	2294.921875	2343.75	2392.578125	2441.40625	2490.234375	2539.0625	2587.890625	2636.71875	2685.546875	2734.375	2783.203125	2832.03125	2880.859375	2929.6875	2978.515625	3027.34375	3076.171875	3125	3173.828125	3222.65625	3271.484375	3320.3125	3369.140625	3417.96875	3466.796875	3515.625	3564.453125	3613.28125	3662.109375	3710.9375	3759.765625	3808.59375	3857.421875	3906.25	3955.078125	4003.90625	4052.734375	4101.5625	4150.390625	4199.21875	4248.046875	4296.875	4345.703125	4394.53125	4443.359375	4492.1875	4541.015625	4589.84375	4638.671875	4687.5	4736.328125	4785.15625	4833.984375	4882.8125	4931.640625	4980.46875	5029.296875	5078.125	5126.953125	5175.78125	5224.609375	5273.4375	5322.265625	5371.09375	5419.921875	5468.75	5517.578125	5566.40625	5615.234375	5664.0625	5712.890625	5761.71875	5810.546875	5859.375	5908.203125	5957.03125	6005.859375	6054.6875	6103.515625	6152.34375	6201.171875	6250	6298.828125	6347.65625	6396.484375	6445.3125	6494.140625	6542.96875	6591.796875	6640.625	6689.453125	6738.28125	6787.109375	6835.9375	6884.765625	6933.59375	6982.421875	7031.25	7080.078125	7128.90625	7177.734375	7226.5625	7275.390625	7324.21875	7373.046875	7421.875	7470.703125	7519.53125	7568.359375	7617.1875	7666.015625	7714.84375	7763.671875	7812.5	7861.328125	7910.15625	7958.984375	8007.8125	8056.640625	8105.46875	8154.296875	8203.125	8251.953125	8300.78125	8349.609375	8398.4375	8447.265625	8496.09375	8544.921875	8593.75	8642.578125	8691.40625	8740.234375	8789.0625	8837.890625	8886.71875	8935.546875	8984.375	9033.203125	9082.03125	9130.859375	9179.6875	9228.515625	9277.34375	9326.171875	9375	9423.828125	9472.65625	9521.484375	9570.3125	9619.140625	9667.96875	9716.796875	9765.625	9814.453125	9863.28125	9912.109375	9960.9375	10009.76563	10058.59375	10107.42188	10156.25	10205.07813	10253.90625	10302.73438	10351.5625	10400.39063	10449.21875	10498.04688	10546.875	10595.70313	10644.53125	10693.35938	10742.1875	10791.01563	10839.84375	10888.67188	10937.5	10986.32813	11035.15625	11083.98438	11132.8125	11181.64063	11230.46875	11279.29688	11328.125	11376.95313	11425.78125	11474.60938	11523.4375	11572.26563	11621.09375	11669.92188	11718.75	11767.57813	11816.40625	11865.23438	11914.0625	11962.89063	12011.71875	12060.54688	12109.375	12158.20313	12207.03125	12255.85938	12304.6875	12353.51563	12402.34375	12451.17188	12500	12548.82813	12597.65625	12646.48438	12695.3125	12744.14063	12792.96875	12841.79688	12890.625	12939.45313	12988.28125	13037.10938	13085.9375	13134.76563	13183.59375	13232.42188	13281.25	13330.07813	13378.90625	13427.73438	13476.5625	13525.39063	13574.21875	13623.04688	13671.875	13720.70313	13769.53125	13818.35938	13867.1875	13916.01563	13964.84375	14013.67188	14062.5	14111.32813	14160.15625	14208.98438	14257.8125	14306.64063	14355.46875	14404.29688	14453.125	14501.95313	14550.78125	14599.60938	14648.4375	14697.26563	14746.09375	14794.92188	14843.75	14892.57813	14941.40625	14990.23438	15039.0625	15087.89063	15136.71875	15185.54688	15234.375	15283.20313	15332.03125	15380.85938	15429.6875	15478.51563	15527.34375	15576.17188	15625	15673.82813	15722.65625	15771.48438	15820.3125	15869.14063	15917.96875	15966.79688	16015.625	16064.45313	16113.28125	16162.10938	16210.9375	16259.76563	16308.59375	16357.42188	16406.25	16455.07813	16503.90625	16552.73438	16601.5625	16650.39063	16699.21875	16748.04688	16796.875	16845.70313	16894.53125	16943.35938	16992.1875	17041.01563	17089.84375	17138.67188	17187.5	17236.32813	17285.15625	17333.98438	17382.8125	17431.64063	17480.46875	17529.29688	17578.125	17626.95313	17675.78125	17724.60938	17773.4375	17822.26563	17871.09375	17919.92188	17968.75	18017.57813	18066.40625	18115.23438	18164.0625	18212.89063	18261.71875	18310.54688	18359.375	18408.20313	18457.03125	18505.85938	18554.6875	18603.51563	18652.34375	18701.17188	18750	18798.82813	18847.65625	18896.48438	18945.3125	18994.14063	19042.96875	19091.79688	19140.625	19189.45313	19238.28125	19287.10938	19335.9375	19384.76563	19433.59375	19482.42188	19531.25	19580.07813	19628.90625	19677.73438	19726.5625	19775.39063	19824.21875	19873.04688	19921.875	19970.70313	20019.53125	20068.35938	20117.1875	20166.01563	20214.84375	20263.67188	20312.5	20361.32813	20410.15625	20458.98438	20507.8125	20556.64063	20605.46875	20654.29688	20703.125	20751.95313	20800.78125	20849.60938	20898.4375	20947.26563	20996.09375	21044.92188	21093.75	21142.57813	21191.40625	21240.23438	21289.0625	21337.89063	21386.71875	21435.54688	21484.375	21533.20313	21582.03125	21630.85938	21679.6875	21728.51563	21777.34375	21826.17188	21875	21923.82813	21972.65625	22021.48438	22070.3125	22119.14063	22167.96875	22216.79688	22265.625	22314.45313	22363.28125	22412.10938	22460.9375	22509.76563	22558.59375	22607.42188	22656.25	22705.07813	22753.90625	22802.73438	22851.5625	22900.39063	22949.21875	22998.04688	23046.875	23095.70313	23144.53125	23193.35938	23242.1875	23291.01563	23339.84375	23388.67188	23437.5	23486.32813	23535.15625	23583.98438	23632.8125	23681.64063	23730.46875	23779.29688	23828.125	23876.95313	23925.78125	23974.60938	24023.4375	24072.26563	24121.09375	24169.92188	24218.75	24267.57813	24316.40625	24365.23438	24414.0625	24462.89063	24511.71875	24560.54688	24609.375	24658.20313	24707.03125	24755.85938	24804.6875	24853.51563	24902.34375	24951.17188	25000	25048.82813	25097.65625	25146.48438	25195.3125	25244.14063	25292.96875	25341.79688	25390.625	25439.45313	25488.28125	25537.10938	25585.9375	25634.76563	25683.59375	25732.42188	25781.25	25830.07813	25878.90625	25927.73438	25976.5625	26025.39063	26074.21875	26123.04688	26171.875	26220.70313	26269.53125	26318.35938	26367.1875	26416.01563	26464.84375	26513.67188	26562.5	26611.32813	26660.15625	26708.98438	26757.8125	26806.64063	26855.46875	26904.29688	26953.125	27001.95313	27050.78125	27099.60938	27148.4375	27197.26563	27246.09375	27294.92188	27343.75	27392.57813	27441.40625	27490.23438	27539.0625	27587.89063	27636.71875	27685.54688	27734.375	27783.20313	27832.03125	27880.85938	27929.6875	27978.51563	28027.34375	28076.17188	28125	28173.82813	28222.65625	28271.48438	28320.3125	28369.14063	28417.96875	28466.79688	28515.625	28564.45313	28613.28125	28662.10938	28710.9375	28759.76563	28808.59375	28857.42188	28906.25	28955.07813	29003.90625	29052.73438	29101.5625	29150.39063	29199.21875	29248.04688	29296.875	29345.70313	29394.53125	29443.35938	29492.1875	29541.01563	29589.84375	29638.67188	29687.5	29736.32813	29785.15625	29833.98438	29882.8125	29931.64063	29980.46875	30029.29688	30078.125	30126.95313	30175.78125	30224.60938	30273.4375	30322.26563	30371.09375	30419.92188	30468.75	30517.57813	30566.40625	30615.23438	30664.0625	30712.89063	30761.71875	30810.54688	30859.375	30908.20313	30957.03125	31005.85938	31054.6875	31103.51563	31152.34375	31201.17188	31250	31298.82813	31347.65625	31396.48438	31445.3125	31494.14063	31542.96875	31591.79688	31640.625	31689.45313	31738.28125	31787.10938	31835.9375	31884.76563	31933.59375	31982.42188	32031.25	32080.07813	32128.90625	32177.73438	32226.5625	32275.39063	32324.21875	32373.04688	32421.875	32470.70313	32519.53125	32568.35938	32617.1875	32666.01563	32714.84375	32763.67188	32812.5	32861.32813	32910.15625	32958.98438	33007.8125	33056.64063	33105.46875	33154.29688	33203.125	33251.95313	33300.78125	33349.60938	33398.4375	33447.26563	33496.09375	33544.92188	33593.75	33642.57813	33691.40625	33740.23438	33789.0625	33837.89063	33886.71875	33935.54688	33984.375	34033.20313	34082.03125	34130.85938	34179.6875	34228.51563	34277.34375	34326.17188	34375	34423.82813	34472.65625	34521.48438	34570.3125	34619.14063	34667.96875	34716.79688	34765.625	34814.45313	34863.28125	34912.10938	34960.9375	35009.76563	35058.59375	35107.42188	35156.25	35205.07813	35253.90625	35302.73438	35351.5625	35400.39063	35449.21875	35498.04688	35546.875	35595.70313	35644.53125	35693.35938	35742.1875	35791.01563	35839.84375	35888.67188	35937.5	35986.32813	36035.15625	36083.98438	36132.8125	36181.64063	36230.46875	36279.29688	36328.125	36376.95313	36425.78125	36474.60938	36523.4375	36572.26563	36621.09375	36669.92188	36718.75	36767.57813	36816.40625	36865.23438	36914.0625	36962.89063	37011.71875	37060.54688	37109.375	37158.20313	37207.03125	37255.85938	37304.6875	37353.51563	37402.34375	37451.17188	37500	37548.82813	37597.65625	37646.48438	37695.3125	37744.14063	37792.96875	37841.79688	37890.625	37939.45313	37988.28125	38037.10938	38085.9375	38134.76563	38183.59375	38232.42188	38281.25	38330.07813	38378.90625	38427.73438	38476.5625	38525.39063	38574.21875	38623.04688	38671.875	38720.70313	38769.53125	38818.35938	38867.1875	38916.01563	38964.84375	39013.67188	39062.5	39111.32813	39160.15625	39208.98438	39257.8125	39306.64063	39355.46875	39404.29688	39453.125	39501.95313	39550.78125	39599.60938	39648.4375	39697.26563	39746.09375	39794.92188	39843.75	39892.57813	39941.40625	39990.23438	40039.0625	40087.89063	40136.71875	40185.54688	40234.375	40283.20313	40332.03125	40380.85938	40429.6875	40478.51563	40527.34375	40576.17188	40625	40673.82813	40722.65625	40771.48438	40820.3125	40869.14063	40917.96875	40966.79688	41015.625	41064.45313	41113.28125	41162.10938	41210.9375	41259.76563	41308.59375	41357.42188	41406.25	41455.07813	41503.90625	41552.73438	41601.5625	41650.39063	41699.21875	41748.04688	41796.875	41845.70313	41894.53125	41943.35938	41992.1875	42041.01563	42089.84375	42138.67188	42187.5	42236.32813	42285.15625	42333.98438	42382.8125	42431.64063	42480.46875	42529.29688	42578.125	42626.95313	42675.78125	42724.60938	42773.4375	42822.26563	42871.09375	42919.92188	42968.75	43017.57813	43066.40625	43115.23438	43164.0625	43212.89063	43261.71875	43310.54688	43359.375	43408.20313	43457.03125	43505.85938	43554.6875	43603.51563	43652.34375	43701.17188	43750	43798.82813	43847.65625	43896.48438	43945.3125	43994.14063	44042.96875	44091.79688	44140.625	44189.45313	44238.28125	44287.10938	44335.9375	44384.76563	44433.59375	44482.42188	44531.25	44580.07813	44628.90625	44677.73438	44726.5625	44775.39063	44824.21875	44873.04688	44921.875	44970.70313	45019.53125	45068.35938	45117.1875	45166.01563	45214.84375	45263.67188	45312.5	45361.32813	45410.15625	45458.98438	45507.8125	45556.64063	45605.46875	45654.29688	45703.125	45751.95313	45800.78125	45849.60938	45898.4375	45947.26563	45996.09375	46044.92188	46093.75	46142.57813	46191.40625	46240.23438	46289.0625	46337.89063	46386.71875	46435.54688	46484.375	46533.20313	46582.03125	46630.85938	46679.6875	46728.51563	46777.34375	46826.17188	46875	46923.82813	46972.65625	47021.48438	47070.3125	47119.14063	47167.96875	47216.79688	47265.625	47314.45313	47363.28125	47412.10938	47460.9375	47509.76563	47558.59375	47607.42188	47656.25	47705.07813	47753.90625	47802.73438	47851.5625	47900.39063	47949.21875	47998.04688	48046.875	48095.70313	48144.53125	48193.35938	48242.1875	48291.01563	48339.84375	48388.67188	48437.5	48486.32813	48535.15625	48583.98438	48632.8125	48681.64063	48730.46875	48779.29688	48828.125	48876.95313	48925.78125	48974.60938	49023.4375	49072.26563	49121.09375	49169.92188	49218.75	49267.57813	49316.40625	49365.23438	49414.0625	49462.89063	49511.71875	49560.54688	49609.375	49658.20313	49707.03125	49755.85938	49804.6875	49853.51563	49902.34375	49951.17188];


Plotting the 2 graphs
% Define specifications
Fs_in = 100e3; % Input sampling frequency in Hz
Fp = 20e3; % Passband frequency in Hz
Fs = 30e3; % Stopband frequency in Hz
Rp = 0.00004; % Passband ripple (linear scale)
As = 110; % Stopband attenuation in dB

% Normalize frequencies with respect to Nyquist frequency (Fs/2)
F = [0 Fp Fs Fs_in/2] / (Fs_in/2); % Frequency bands
A = [1 1 0 0]; % Desired amplitude (1 in passband, 0 in stopband)
W = [1 Rp/(10^(-As/20))]; % Weights for passband and stopband

% Define filter order (N)
N = 24;

% Design the filter using Remez (Parks-McClellan) algorithm
hh = firpm(N-1, F, A, W); % N-1 because firpm specifies N-1 for PM design
% Plot the magnitude response
[fr_hh, f] = freqz(hh, 1, 1024, Fs_in);  %%#000324
figure;
f1=abs(fr_hh);
% disp("done!")
plot(f/1e3, 20*log10(abs(fr_hh)), 'linewidth', 1);
grid on;
title('Magnitude Response of Half-Band FIR Filter (64-bit Floating Point)');
xlabel('Frequency (kHz)');
ylabel('Magnitude (dB)');
xlim([0 Fs_in/2 / 1e3]);
ylim([-150 10]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Plot the magnitude response
% [fr_hh, f] = freqz(hh, 1, 1024, Fs_in);  %%#000324
figure;
f2=abs(my_filter_coefficients);
% disp("done!")

plot(fa/1e3, 20*log10(abs(my_filter_coefficients)), 'linewidth', 1);
grid on;
title('Magnitude Response of 22-Bit Fixed Point Arithmetic');
xlabel('Frequency (kHz)');
ylabel('Magnitude (dB)');
xlim([0 Fs_in/2 / 1e3]);
ylim([-150 10]);

Final Function 22-bit Real Coefficients
function results_added = calculateFilterOutput(k)
    % Custom Filter Coefficients
    input_h_coefficents = [-0.00192549408683583 0.00400613075152030 0.0143332238535565 0.00499288340942921 -0.0212929555126346 -0.0120292737892775 0.0372588036845183 0.0289168859094719 -0.0663317490917591 -0.0720277276669940 0.158008422563016 0.436677122273504 0.436677122273504 0.158008422563016 -0.0720277276669940 -0.0663317490917591 0.0289168859094719 0.0372588036845183 -0.0120292737892775 -0.0212929555126346 0.00499288340942921 0.0143332238535565 0.00400613075152030 -0.00192549408683583];

    output_array = calculateCosineArray(k);

    p = 1;
    q = 1;
    r = 1;
    result_to_be_added = zeros(1, 24);
    while q <= 24
        result_to_be_added(r) = multiplierwithsign(input_h_coefficents(p), output_array(q));
        q = q + 1;
        r = r + 1;
        p = p + 1;
    end

    s = 1;
    results_added = result_to_be_added(s);

    while s < 24
        results_added = specialAdd(result_to_be_added(s+1), results_added);
        s = s + 1;
    end
end

function output_array = calculateCosineArray(k)
    N = 1024;  % Resolution
    output_array = zeros(1, 24);  % Pre-allocate array for performance
    
    for i = 1:24
        output_array(i) = cos((pi * (i - 1) * k) / N);
    end

end

function finalResult = specialMultiply(num1, num2)
    num1_abs = abs(num1);
    num2_abs = abs(num2);
    
    num1_abs_binary = convertTo21Bit(num1_abs);
    num1_abs_decimal = bin2dec(num1_abs_binary);
    
    num2_abs_binary = convertTo21Bit(num2_abs);
    num2_abs_decimal = bin2dec(num2_abs_binary);
    
    product = num1_abs_decimal * num2_abs_decimal;
    
    product_binary = dec2bin(product);
    product_binary = pad(product_binary, 42, 'left', '0');
    
    product_binary = product_binary(2:end);
    
    result_binary = product_binary(1:21);
    
    integer_part = bin2dec(result_binary(1));
    fractional_part = bin2dec(result_binary(2:end)) / (2^20);
    finalResult = integer_part + fractional_part;
end

function binary = convertTo21Bit(num)
    fractional_bits = 20;
    integer_bit = 1;
    
    integer_part = floor(num);
    fractional_part = num - integer_part;
    
    integer_binary = dec2bin(integer_part, integer_bit);
    
    fractional_binary = '';
    for i = 1:fractional_bits
        fractional_part = fractional_part * 2;
        if fractional_part >= 1
            fractional_binary = [fractional_binary '1'];
            fractional_part = fractional_part - 1;
        else
            fractional_binary = [fractional_binary '0'];
        end
    end
    
    binary = [integer_binary fractional_binary];
end

function withsignresult = multiplierwithsign(num11, num22)
    num1 = num11;
    num2 = num22;
    withsignresult = specialMultiply(num1, num2);
    if (num1 < 0 && num2 > 0) || (num1 > 0 && num2 < 0)
        withsignresult = -withsignresult;
    end
end

function result = specialAdd(a, b)
    % Implement your special addition logic here
    % This is a placeholder function
    result = a + b;
end

Final Function 22-bit IMG Coefficients

function results_added = calculateFilterOutput1(k)
    % Custom Filter Coefficients
    input_h_coefficents = [-0.00192549408683583 0.00400613075152030 0.0143332238535565 0.00499288340942921 -0.0212929555126346 -0.0120292737892775 0.0372588036845183 0.0289168859094719 -0.0663317490917591 -0.0720277276669940 0.158008422563016 0.436677122273504 0.436677122273504 0.158008422563016 -0.0720277276669940 -0.0663317490917591 0.0289168859094719 0.0372588036845183 -0.0120292737892775 -0.0212929555126346 0.00499288340942921 0.0143332238535565 0.00400613075152030 -0.00192549408683583];

    output_array = calculatesinineArray(k);

    p = 1;
    q = 1;
    r = 1;
    result_to_be_added = zeros(1, 24);
    while q <= 24
        result_to_be_added(r) = multiplierwithsig1(input_h_coefficents(p), output_array(q));
        q = q + 1;
        r = r + 1;
        p = p + 1;
    end

    s = 1;
    results_added = result_to_be_added(s);

    while s < 24
        results_added = specialAd1(result_to_be_added(s+1), results_added);
        s = s + 1;
    end
end

function output_array = calculatesinineArray(k)
    N = 1024;  % Resolution
    output_array = zeros(1, 24);  % Pre-allocate array for performance
    
    for i = 1:24
        output_array(i) = sin((pi * (i - 1) * k) / N);
    end
end

function finalResult = specialMultipl11(num1, num2)
    num1_abs = abs(num1);
    num2_abs = abs(num2);
    
    num1_abs_binary = convertTo21Bi1(num1_abs);
    num1_abs_decimal = bin2dec(num1_abs_binary);
    
    num2_abs_binary = convertTo21Bi1(num2_abs);
    num2_abs_decimal = bin2dec(num2_abs_binary);
    
    product = num1_abs_decimal * num2_abs_decimal;
    
    product_binary = dec2bin(product);
    product_binary = pad(product_binary, 42, 'left', '0');
    
    product_binary = product_binary(2:end);
    
    result_binary = product_binary(1:21);
    
    integer_part = bin2dec(result_binary(1));
    fractional_part = bin2dec(result_binary(2:end)) / (2^20);
    finalResult = integer_part + fractional_part;
end

function binary = convertTo21Bi1(num)
    fractional_bits = 20;
    integer_bit = 1;
    
    integer_part = floor(num);
    fractional_part = num - integer_part;
    
    integer_binary = dec2bin(integer_part, integer_bit);
    
    fractional_binary = '';
    for i = 1:fractional_bits
        fractional_part = fractional_part * 2;
        if fractional_part >= 1
            fractional_binary = [fractional_binary '1'];
            fractional_part = fractional_part - 1;
        else
            fractional_binary = [fractional_binary '0'];
        end
    end
    
    binary = [integer_binary fractional_binary];
end

function withsignresult = multiplierwithsig1(num11, num22)
    num1 = num11;
    num2 = num22;
    withsignresult = specialMultipl11(num1, num2);
    if (num1 < 0 && num2 > 0) || (num1 > 0 && num2 < 0)
        withsignresult = -withsignresult;
    end
end

function result = specialAd1(a, b)
    % Implement your special addition logic here
    % This is a placeholder function
    result = a + b;
end
